// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: achievement-system/v1/achievement_system.proto

package achievement_system

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListUserAchievementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ListUserAchievementRequest) Reset() {
	*x = ListUserAchievementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserAchievementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserAchievementRequest) ProtoMessage() {}

func (x *ListUserAchievementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserAchievementRequest.ProtoReflect.Descriptor instead.
func (*ListUserAchievementRequest) Descriptor() ([]byte, []int) {
	return file_achievement_system_v1_achievement_system_proto_rawDescGZIP(), []int{0}
}

func (x *ListUserAchievementRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ListUserAchievementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Achievements []*UserAchievement `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty"`
}

func (x *ListUserAchievementResponse) Reset() {
	*x = ListUserAchievementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserAchievementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserAchievementResponse) ProtoMessage() {}

func (x *ListUserAchievementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserAchievementResponse.ProtoReflect.Descriptor instead.
func (*ListUserAchievementResponse) Descriptor() ([]byte, []int) {
	return file_achievement_system_v1_achievement_system_proto_rawDescGZIP(), []int{1}
}

func (x *ListUserAchievementResponse) GetAchievements() []*UserAchievement {
	if x != nil {
		return x.Achievements
	}
	return nil
}

type ClaimAchievementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AchievementId string `protobuf:"bytes,2,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	TierId        string `protobuf:"bytes,3,opt,name=tier_id,json=tierId,proto3" json:"tier_id,omitempty"`
}

func (x *ClaimAchievementRequest) Reset() {
	*x = ClaimAchievementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimAchievementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimAchievementRequest) ProtoMessage() {}

func (x *ClaimAchievementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimAchievementRequest.ProtoReflect.Descriptor instead.
func (*ClaimAchievementRequest) Descriptor() ([]byte, []int) {
	return file_achievement_system_v1_achievement_system_proto_rawDescGZIP(), []int{2}
}

func (x *ClaimAchievementRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClaimAchievementRequest) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

func (x *ClaimAchievementRequest) GetTierId() string {
	if x != nil {
		return x.TierId
	}
	return ""
}

type ClaimAchievementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClaimAchievementResponse) Reset() {
	*x = ClaimAchievementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimAchievementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimAchievementResponse) ProtoMessage() {}

func (x *ClaimAchievementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimAchievementResponse.ProtoReflect.Descriptor instead.
func (*ClaimAchievementResponse) Descriptor() ([]byte, []int) {
	return file_achievement_system_v1_achievement_system_proto_rawDescGZIP(), []int{3}
}

type UserAchievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AchievementId string                 `protobuf:"bytes,2,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	Category      string                 `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Repeat        int64                  `protobuf:"varint,4,opt,name=repeat,proto3" json:"repeat,omitempty"`
	Tiers         []*UserAchievementTier `protobuf:"bytes,5,rep,name=tiers,proto3" json:"tiers,omitempty"`
}

func (x *UserAchievement) Reset() {
	*x = UserAchievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAchievement) ProtoMessage() {}

func (x *UserAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAchievement.ProtoReflect.Descriptor instead.
func (*UserAchievement) Descriptor() ([]byte, []int) {
	return file_achievement_system_v1_achievement_system_proto_rawDescGZIP(), []int{4}
}

func (x *UserAchievement) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserAchievement) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

func (x *UserAchievement) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *UserAchievement) GetRepeat() int64 {
	if x != nil {
		return x.Repeat
	}
	return 0
}

func (x *UserAchievement) GetTiers() []*UserAchievementTier {
	if x != nil {
		return x.Tiers
	}
	return nil
}

type UserAchievementTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tier            *Tier                `protobuf:"bytes,1,opt,name=tier,proto3" json:"tier,omitempty"`
	Name            string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RequirementDesc string               `protobuf:"bytes,3,opt,name=requirement_desc,json=requirementDesc,proto3" json:"requirement_desc,omitempty"`
	Repeated        int64                `protobuf:"varint,4,opt,name=repeated,proto3" json:"repeated,omitempty"`
	LoyaltyPoints   int64                `protobuf:"varint,5,opt,name=loyalty_points,json=loyaltyPoints,proto3" json:"loyalty_points,omitempty"`
	AchievedAt      *timestamp.Timestamp `protobuf:"bytes,6,opt,name=achieved_at,json=achievedAt,proto3" json:"achieved_at,omitempty"`
	ClaimedAt       *timestamp.Timestamp `protobuf:"bytes,7,opt,name=claimed_at,json=claimedAt,proto3" json:"claimed_at,omitempty"`
}

func (x *UserAchievementTier) Reset() {
	*x = UserAchievementTier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAchievementTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAchievementTier) ProtoMessage() {}

func (x *UserAchievementTier) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAchievementTier.ProtoReflect.Descriptor instead.
func (*UserAchievementTier) Descriptor() ([]byte, []int) {
	return file_achievement_system_v1_achievement_system_proto_rawDescGZIP(), []int{5}
}

func (x *UserAchievementTier) GetTier() *Tier {
	if x != nil {
		return x.Tier
	}
	return nil
}

func (x *UserAchievementTier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserAchievementTier) GetRequirementDesc() string {
	if x != nil {
		return x.RequirementDesc
	}
	return ""
}

func (x *UserAchievementTier) GetRepeated() int64 {
	if x != nil {
		return x.Repeated
	}
	return 0
}

func (x *UserAchievementTier) GetLoyaltyPoints() int64 {
	if x != nil {
		return x.LoyaltyPoints
	}
	return 0
}

func (x *UserAchievementTier) GetAchievedAt() *timestamp.Timestamp {
	if x != nil {
		return x.AchievedAt
	}
	return nil
}

func (x *UserAchievementTier) GetClaimedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ClaimedAt
	}
	return nil
}

type Tier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TierId    string `protobuf:"bytes,1,opt,name=tier_id,json=tierId,proto3" json:"tier_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SortIndex int64  `protobuf:"varint,3,opt,name=sort_index,json=sortIndex,proto3" json:"sort_index,omitempty"`
}

func (x *Tier) Reset() {
	*x = Tier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tier) ProtoMessage() {}

func (x *Tier) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_system_v1_achievement_system_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tier.ProtoReflect.Descriptor instead.
func (*Tier) Descriptor() ([]byte, []int) {
	return file_achievement_system_v1_achievement_system_proto_rawDescGZIP(), []int{6}
}

func (x *Tier) GetTierId() string {
	if x != nil {
		return x.TierId
	}
	return ""
}

func (x *Tier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tier) GetSortIndex() int64 {
	if x != nil {
		return x.SortIndex
	}
	return 0
}

var File_achievement_system_v1_achievement_system_proto protoreflect.FileDescriptor

var file_achievement_system_v1_achievement_system_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x35, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x72, 0x0a, 0x17,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x01, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x22,
	0xb9, 0x02, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x22, 0x52, 0x0a, 0x04, 0x54,
	0x69, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x32,
	0xeb, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x6f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3e, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x6b,
	0x61, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x79, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x66, 0x69, 0x2d,
	0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_achievement_system_v1_achievement_system_proto_rawDescOnce sync.Once
	file_achievement_system_v1_achievement_system_proto_rawDescData = file_achievement_system_v1_achievement_system_proto_rawDesc
)

func file_achievement_system_v1_achievement_system_proto_rawDescGZIP() []byte {
	file_achievement_system_v1_achievement_system_proto_rawDescOnce.Do(func() {
		file_achievement_system_v1_achievement_system_proto_rawDescData = protoimpl.X.CompressGZIP(file_achievement_system_v1_achievement_system_proto_rawDescData)
	})
	return file_achievement_system_v1_achievement_system_proto_rawDescData
}

var file_achievement_system_v1_achievement_system_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_achievement_system_v1_achievement_system_proto_goTypes = []interface{}{
	(*ListUserAchievementRequest)(nil),  // 0: systemevent.v1.ListUserAchievementRequest
	(*ListUserAchievementResponse)(nil), // 1: systemevent.v1.ListUserAchievementResponse
	(*ClaimAchievementRequest)(nil),     // 2: systemevent.v1.ClaimAchievementRequest
	(*ClaimAchievementResponse)(nil),    // 3: systemevent.v1.ClaimAchievementResponse
	(*UserAchievement)(nil),             // 4: systemevent.v1.UserAchievement
	(*UserAchievementTier)(nil),         // 5: systemevent.v1.UserAchievementTier
	(*Tier)(nil),                        // 6: systemevent.v1.Tier
	(*timestamp.Timestamp)(nil),         // 7: google.protobuf.Timestamp
}
var file_achievement_system_v1_achievement_system_proto_depIdxs = []int32{
	4, // 0: systemevent.v1.ListUserAchievementResponse.achievements:type_name -> systemevent.v1.UserAchievement
	5, // 1: systemevent.v1.UserAchievement.tiers:type_name -> systemevent.v1.UserAchievementTier
	6, // 2: systemevent.v1.UserAchievementTier.tier:type_name -> systemevent.v1.Tier
	7, // 3: systemevent.v1.UserAchievementTier.achieved_at:type_name -> google.protobuf.Timestamp
	7, // 4: systemevent.v1.UserAchievementTier.claimed_at:type_name -> google.protobuf.Timestamp
	0, // 5: systemevent.v1.AchievementSystem.ListUserAchievements:input_type -> systemevent.v1.ListUserAchievementRequest
	2, // 6: systemevent.v1.AchievementSystem.ClaimAchievement:input_type -> systemevent.v1.ClaimAchievementRequest
	1, // 7: systemevent.v1.AchievementSystem.ListUserAchievements:output_type -> systemevent.v1.ListUserAchievementResponse
	3, // 8: systemevent.v1.AchievementSystem.ClaimAchievement:output_type -> systemevent.v1.ClaimAchievementResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_achievement_system_v1_achievement_system_proto_init() }
func file_achievement_system_v1_achievement_system_proto_init() {
	if File_achievement_system_v1_achievement_system_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_achievement_system_v1_achievement_system_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserAchievementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_achievement_system_v1_achievement_system_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserAchievementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_achievement_system_v1_achievement_system_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimAchievementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_achievement_system_v1_achievement_system_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimAchievementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_achievement_system_v1_achievement_system_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAchievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_achievement_system_v1_achievement_system_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAchievementTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_achievement_system_v1_achievement_system_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_achievement_system_v1_achievement_system_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_achievement_system_v1_achievement_system_proto_goTypes,
		DependencyIndexes: file_achievement_system_v1_achievement_system_proto_depIdxs,
		MessageInfos:      file_achievement_system_v1_achievement_system_proto_msgTypes,
	}.Build()
	File_achievement_system_v1_achievement_system_proto = out.File
	file_achievement_system_v1_achievement_system_proto_rawDesc = nil
	file_achievement_system_v1_achievement_system_proto_goTypes = nil
	file_achievement_system_v1_achievement_system_proto_depIdxs = nil
}
