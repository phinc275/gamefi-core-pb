// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: achievement-system/v1/achievement_system.proto

package achievement_system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AchievementSystem_ListUserAchievements_FullMethodName = "/systemevent.v1.AchievementSystem/ListUserAchievements"
	AchievementSystem_ClaimAchievement_FullMethodName     = "/systemevent.v1.AchievementSystem/ClaimAchievement"
)

// AchievementSystemClient is the client API for AchievementSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AchievementSystemClient interface {
	ListUserAchievements(ctx context.Context, in *ListUserAchievementRequest, opts ...grpc.CallOption) (*ListUserAchievementResponse, error)
	ClaimAchievement(ctx context.Context, in *ClaimAchievementRequest, opts ...grpc.CallOption) (*ClaimAchievementResponse, error)
}

type achievementSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewAchievementSystemClient(cc grpc.ClientConnInterface) AchievementSystemClient {
	return &achievementSystemClient{cc}
}

func (c *achievementSystemClient) ListUserAchievements(ctx context.Context, in *ListUserAchievementRequest, opts ...grpc.CallOption) (*ListUserAchievementResponse, error) {
	out := new(ListUserAchievementResponse)
	err := c.cc.Invoke(ctx, AchievementSystem_ListUserAchievements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementSystemClient) ClaimAchievement(ctx context.Context, in *ClaimAchievementRequest, opts ...grpc.CallOption) (*ClaimAchievementResponse, error) {
	out := new(ClaimAchievementResponse)
	err := c.cc.Invoke(ctx, AchievementSystem_ClaimAchievement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AchievementSystemServer is the server API for AchievementSystem service.
// All implementations must embed UnimplementedAchievementSystemServer
// for forward compatibility
type AchievementSystemServer interface {
	ListUserAchievements(context.Context, *ListUserAchievementRequest) (*ListUserAchievementResponse, error)
	ClaimAchievement(context.Context, *ClaimAchievementRequest) (*ClaimAchievementResponse, error)
	mustEmbedUnimplementedAchievementSystemServer()
}

// UnimplementedAchievementSystemServer must be embedded to have forward compatible implementations.
type UnimplementedAchievementSystemServer struct {
}

func (UnimplementedAchievementSystemServer) ListUserAchievements(context.Context, *ListUserAchievementRequest) (*ListUserAchievementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAchievements not implemented")
}
func (UnimplementedAchievementSystemServer) ClaimAchievement(context.Context, *ClaimAchievementRequest) (*ClaimAchievementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimAchievement not implemented")
}
func (UnimplementedAchievementSystemServer) mustEmbedUnimplementedAchievementSystemServer() {}

// UnsafeAchievementSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AchievementSystemServer will
// result in compilation errors.
type UnsafeAchievementSystemServer interface {
	mustEmbedUnimplementedAchievementSystemServer()
}

func RegisterAchievementSystemServer(s grpc.ServiceRegistrar, srv AchievementSystemServer) {
	s.RegisterService(&AchievementSystem_ServiceDesc, srv)
}

func _AchievementSystem_ListUserAchievements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementSystemServer).ListUserAchievements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AchievementSystem_ListUserAchievements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementSystemServer).ListUserAchievements(ctx, req.(*ListUserAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementSystem_ClaimAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementSystemServer).ClaimAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AchievementSystem_ClaimAchievement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementSystemServer).ClaimAchievement(ctx, req.(*ClaimAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AchievementSystem_ServiceDesc is the grpc.ServiceDesc for AchievementSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AchievementSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "systemevent.v1.AchievementSystem",
	HandlerType: (*AchievementSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUserAchievements",
			Handler:    _AchievementSystem_ListUserAchievements_Handler,
		},
		{
			MethodName: "ClaimAchievement",
			Handler:    _AchievementSystem_ClaimAchievement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "achievement-system/v1/achievement_system.proto",
}
